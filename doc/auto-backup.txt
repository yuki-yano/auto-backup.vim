*auto-backup.txt*        For Vim version 9.0 and Neovim       *auto-backup*

                        AUTO-BACKUP.VIM
              https://github.com/yuki-yano/auto-backup.vim

CONTENTS                                        *auto-backup-contents*
1. Introduction.................................|auto-backup-introduction|
2. Installation...............................|auto-backup-installation|
3. Configuration..............................|auto-backup-configuration|
4. Usage Example..............................|auto-backup-usage-example|
5. Commands.....................................|auto-backup-commands|
6. Author.......................................|auto-backup-author|
7. License......................................|auto-backup-license|

==============================================================================
1. Introduction                               *auto-backup-introduction*

`auto-backup.vim` is a Vim/Neovim plugin that automatically backs up files.
It detects file changes during editing and creates backups in the specified
directory. It also supports files within Git repositories, organizing backups
for each repository.

**This plugin depends on Denops.vim (|denops-vim|). Please ensure it is installed.**

Features:
- Automatic Backup: Detects file changes and backs them up automatically.
- Git Integration: Generates backup paths based on the Git repository root
  and manages backups per repository.
- Customizable Backup Root: You can specify the root directory for backups
  using the |g:auto_backup_root_dir| variable.
- Timestamped Backups: Manages backup files (their parent directories) with
  timestamps in `YYYY-MM-DD_HH:mm` format.
- Home Directory Only: For safety, only files under the home directory are
  targeted for backup.

==============================================================================
2. Installation                             *auto-backup-installation*

Install with your preferred plugin manager.
**Requires |denops-vim|.**

Example using [lazy.nvim](https://github.com/folke/lazy.nvim):
>
  -- Lua
  {
    "yuki-yano/auto-backup.vim",
    dependencies = { "vim-denops/denops.vim" },
    config = function()
      vim.g.auto_backup_root_dir = vim.fn.expand("~/.cache/auto-backup.vim")
    end,
  }
<

Refer to your plugin manager's documentation for details on installing
|denops-vim| and this plugin.

==============================================================================
3. Configuration                            *auto-backup-configuration*

                                                *g:auto_backup_root_dir*
`g:auto_backup_root_dir`
  Description: The root directory to save backup files.
               This setting is REQUIRED. The plugin will not function
               correctly without it.
               If using `lazy.nvim`, you can configure this within the
               `config` function as shown in the installation example.
  Type:        String
  Default:     (No default, must be set by the user)

Example (Vim script):
>
  " Create backups under ~/.cache/auto-backup.vim/
  let g:auto_backup_root_dir = expand('~/.cache/auto-backup.vim')
<
The plugin reads this setting on startup.

==============================================================================
4. Usage Example                                *auto-backup-usage-example*

You can create a custom command to open the backup directory for the current
file in your preferred file explorer.

Here's an example using Lua with Neovim's API and the `Fern` file explorer
(see https://github.com/lambdalisue/vim-fern).
You can place this in your Neovim configuration (e.g., `init.lua`):

>
  -- Lua
  vim.api.nvim_create_user_command('AutoBackupOpen', function()
    -- Get the backup directory path for the current file
    local backup_dir = vim.fn.call('denops#request', {
      'auto-backup',
      'getBackupDir',
      {vim.fn.expand('%:p')}
    })
    if backup_dir and backup_dir ~= '' then
      -- Open the directory with Fern in a drawer
      -- Use vim.fn.fnameescape() to correctly escape special characters in the path
      vim.cmd('Fern ' ..
        vim.fn.fnameescape(backup_dir) ..
        ' -drawer')
    else
      print("No backup directory found for the current file or an error occurred.")
    end
  end, {})
<
This command `:AutoBackupOpen` will then open the backup directory for the
current buffer in Fern. You can adapt this example to use your favorite file
explorer or to add more complex logic. Remember to handle cases where the
backup directory might not exist or the denops function might return an error.

==============================================================================
5. Commands                                     *auto-backup-commands*

Backups are usually performed automatically. However, commands are available
to manually trigger backups or check backup directories.

                                                *auto-backup-backup*
`denops#request('auto-backup', 'backup', [{filepath}])`
  Manually backs up the file specified by `{filepath}` (absolute path).

  Example:
>
  :call denops#request('auto-backup', 'backup', [expand('%:p')])
<
                                                *auto-backup-get_backup_dir*
`denops#request('auto-backup', 'getBackupDir', [{filepath}])`
  Gets the backup directory path for the file specified by `{filepath}`
  (absolute path). This returns the parent directory path for the
  backup group to which the file belongs. It does not include
  individual timestamped directory names.

  Example:
>
  :echo denops#request('auto-backup', 'getBackupDir', [expand('%:p')])
<

==============================================================================
6. Author                                       *auto-backup-author*

Yuki Yano (https://github.com/yuki-yano)

==============================================================================
7. License                                      *auto-backup-license*

MIT License

See: https://github.com/yuki-yano/auto-backup.vim/blob/main/LICENSE

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
